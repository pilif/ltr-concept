$Id: ltrMessages.txt,v 1.3 2000-11-06 19:47:27 pilif Exp $
ltrMessages 1.1
---------------

1) Problemstellung
Linktrail soll ein Kommunikationssystem bekommen. Es ist mit einer 
exponentiellen Vermehrung von Nachrichten zu rechnen, die sich
alle minimal von einander unterscheiden, daher muss im Programmkonzept
die einfache, modulare Erweiterung durch neue Messages gesichert werden.

Zusammengefasst wird dieses Dokument eine programmtechnische Lösung für
folgende Anforderungen bieten:

  *) Make Friendship wird durch das neue Message-System realisiert
  *) Recommend this trail ebenso
  *) Das System ist einfach mit weiteren Nachrichten erweiterbar.
  *) Das System erlaubt die Anzeige beliebiger Layouts pro Nachricht

2) Realisierung
 2.1) Datenstruktur
Eine Nachricht besteht grundsätzlich immer aus einem Nachrichten-Typen,
einem Empfänger und einem Sender (System oder ein User) und einem Datum, 
an dem die Nachricht entstanden ist. Zusätzlich hat jede Nachricht ein 
Flag, das definiert, ob sie gelesen wurde, oder nicht.

Der Rest der Nachricht unterscheidet sich von Typ zu Typ. Als
Speicherformat wird in der Datenbank für die Felder, nach denen nicht
Sortiert werden muss der Datentyp "TEXT" verwendet, in den die
serialisierte Form eines Arrays geschrieben wird.

Gleichzeitig haben User-Messages (MT=9) ein weiteres Datenfeld: Einen
Reference-Counter; dies zur Realisierung des "Sent"-Ordners: Wird eine
Nachricht von einem Benutzer zu einem anderen versendet, so wird der
Referenzzähler (ein Bitflag) auf "Bei Target und Sender vorhanden
gesetzt. Löscht der eine oder andere User "seine" Nachricht, wird das
Feld neu beschrieben. Hat keine mehr Interesse an der Message, wird sie
gelöscht.

Damit entsteht folgendes Datenmodell:

CREATE TABLE 
 ltrMessages (
   Message_ID INT not null AUTO_INCREMENT, 
   Target VARCHAR (32) not null, 
   MessageType INT not null, 
   Sender VARCHAR (32) not null, 
   Date DATETIME not null, 
   Done ENUM ('y','n') not null, 
   Data TEXT not null , 
   ReferenceCount INT null
   PRIMARY KEY (Message_ID)
 ) 

 2.2) Generische Programmierung
Um das System beliebig mit weiteren Messages zu erweitern, und um die
Modularität des Codes beizubehalten, wird ein objektorientierter Ansatz
gewählt, der innerhalb des in PHP technisch Machbaren liegt. Ansäztze
wie Class Factories und abstrakte Basisklassen lassen sich damit leider
nicht realisieren. Dennoch kann über eine "Emulation" der Features
einiges Erreicht werden.

  2.2.1) Grundsätzliche Darstellung
Eine PHP-Funktion übergibt das Array der aktuellen ausgelesenen
Nachricht an eine PHP-Funktion. Diese entscheidet anhand des
Message-Type-Feldes und anhand eines intern definierten Arrays, was für
eine Factory-Funktion aufgerufen werden soll, und ruft diese danach auf.

Die Factory-Funktion erstellt ein Objekt, das von ltrMessage
abgeleitet ist, dessen beiden methoden print_simple und print_extended
überschreibt und eventuell durch weitere Methoden ergänzt.     

Das erstellte Objekt wird in ein Array eingefügt, dass dann
schlussendlich an den Aufrufer zurückgegeben wird.

Der Layout-Code-Stack kann dann durch dieses Array iterieren und je nach
Wunsch print_simple (für das Tabellen-Layout) oder print_extended (für
die detailierte Ansicht) aufrufen.

  2.2.3) Schnittstelle
Zwischen der Seite, die das Message-Center darstellt (momentan eine
stark erweiterte Version von edit_prefs.php), und dem jeweiligen
Message-Objekt muss eine Schnitstelle aufgebaut werden, damit die
Anzeige-Datei "merkt", ob der aktuelle Request für sie (z.B.
Sortierreihenfolge der Nachrichten) oder für ein Message-Objekt gilt.
Gleichzeitig muss die Anzeige-Seite "wissen", wie sie nach Bearbeitung
eines Requests einer Nachricht weiter verfahren soll (reload, gar
nichts,...). Folgendes Interface findet Verwendung:

Parameter		Sinn
objectid		Wenn gesetzt, wird der Aufruf (GET oder POST)
                        als Request an ein Message-Objekt verstanden. Um
			genau zu sein: an das Message-Objekt mit der
			Message-ID, die im Parameter angegeben wurde.
viewtype		Wenn 1, so wird die Anzeige-Seite sich selbst
			nicht neu laden, wenn die Funktion
			$obj->user_interraction() aufgerufen wurde. Wenn
			0, so wird die aktuelle Seite darauf neu
			geladen.

Alle HTTP-Parameter werden bei jeglichen Aufrufen an das Message-Objekt
in der Methode $obj->user_interaction() in Form einer Referenz
übergeben. Das Objekt kann selst entscheiden, was es tun will, oder eben
nicht. Gibt diese Methode einen String zurück, wird dieser als eine URL
für einen Location-Header interpretiert.

  2.2.2) Betrachtung
Diese Methode erlaubt es, eine weitere Nachricht in das System
einzufügen, ohne dass grosse Änderungen gemacht werden müssen
(Erweiterung um ein Message-Objekt, Erweiterung um eine Factory-Funktion
und Änderung des MT->factory-Arrays). Gleichzeitig bietet das System die
grösstmögliche Flexibilität bezüglich verschiedener Nachrichten-Typen.
Passendes Beispiel: Eine Subscription-Notification-Nachricht "weiss", 
dass sie eine solche ist und kann sich selbst von einem Request zu einer
Message degradieren, wenn z.B. der betreffende Trail bereits subscribed
ist. Der Programmcode bleibt auf die jeweiligen Nachrichten zentriert
und ist somit übersichtlich. Der Layout-Code-Stack auf der anderen Seite
muss sich nicht mit verschiedenen Nachrichten-Typen herumschlagen.

 2.3) Aktualisieren von bestehendem Code
Durch den Umbau auf das Message-basierte System werden etliche bereits
implementierte Funktionen obsolet, bzw. werden anders dargestellt.
Dieser Abschnitt verdeutlicht die jeweils notwendigen Änderungen:

  2.3.1) Friendship
Friendship-Requests, deren Anzeige und deren Beantwortung laufen neu
über das Message-System. Freundschaften werden direkt von den
jeweiligen Message-Objekten erzeugt, können aber weiterhin nach dem
alten Muster geschlossen werden. Zusätzlich wird das IWANTTO-Feld auf
der Mypage erweitert, so dass die Aktion des jewiligen
"Freindship"-Items klarer wird. So wird je nach Kontext eine der
folgenden IWANTTO-Texte angezeigt:

 1) Request a friendship with <<username>>
 2) Accept <<username>>'s request
 3) Cancel my friendship request to <<username>>
 4) Cancel my friendship with <<username>>

Früher waren nur die Einträge 1 und 4 vorhhanden, die dann je nach
Kontext 2, resp. 3 auslösten.

Über die Message (MI=12) wird der Benutzer über den Fortgang des
Friendship-Requests informiert.

Damit wird in der Tabelle ltrFriends der Type (req/stab) unnötig, da ein
Request über die ltrMessages-Tabelle abgewickelt wird. Ein Eintrag in
ltrFriends kommt nur noch bei einer vollständigen Freundschaft zustande.

  2.3.2) Recommendation
Die Recommendation von Trails wird neu auch über ein Message-Objekt
abgewickelt. Damit behebt sich auch das Problem, dass ein Trail mehrfach
subscribed werden konnte: Wird ein Trail subscribed, nachdem bereits ein
Request besteht, und wird danach der Request mit "Yes" beantwortet, ist
der Trail doppelt subscribed. 

Das jewilige Message-Objekt erkennt, ob eine Subscription besteht und
degradiert sich selbst zu einer normalen Nachricht "billbob recommended
you to subscribe xxx, but you have already subscribed it yourself"


 2.4) Erweiterung bestehenden Codes
Es muss eine einfache Funktion erstellt werden, die der automatischen
Absetzung von Nachrichten dient. Ist ein Benutzer mit Permissions != user
eingeloggt, muss in allen Editier-Bildschirmen eine Checkbox hinzugefügt
werden, ob die Änderungen als "linktrail", oder als der User selbst 
vorgenommen werden (in ersterem Fall wird eine Warnung an den Benutzer
versendet).


3) Betrachtung
Das neue linktrail Message-System wird mit diesem Programmierkonzept so
flexibel wie möglich und erlaubt eine spätere Erweiterung mit minimalem
Aufwand. Durch den fortgeschrittenen Zusatand des Prototypen zu diesem
Zeitpunkt, müssen leider viele Funktionen neu programmiert werden, was
den benötigten Zeitaufwand explodieren lässt (Implementierung und Test).
Nichts desto trotz rechtfertigt sich dieser Aufwand, da viele Probleme
aus [1] gelöst werden können und linktrail sich seiner Philosophie
(Co-working) weiter annähern kann.

philip.hofstetter@linktrail.com
06.11.00

-- 
1) userfeedback.txt
