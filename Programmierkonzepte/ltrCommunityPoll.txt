$Id: ltrCommunityPoll.txt,v 1.3 2000-11-13 21:25:12 pilif Exp $

ltrCommunityPoll 1.0
----------------

1) Problemstellung
Das Konzept ExpertPoll[1] soll in allen Punkten programmiertechnisch
umgesetzt werden. Dabei soll jeder Experte in jeder Kategorie beliebig
viele Male abstimmen können; allerdings hat jeder Experte pro Kategorie
nur eine Stimme. Für die Redaktion muss das Abstimmungsergebnis
eingesehen werden können. Das System muss mit einer bestimmten Anzahl an
verschiedenen Abstimmungstypen umgegehen können.


2) Datenmodell
Es drängt sich auf, ein ändliches Datenmodell wie bei den Messages[2] zu
verwenden, da sich dieses als sehr Leiastungsfähig, schnell, flxibel und
erweiterbar erwiesen hat. Gleichzeitig erweist sich dieses Modell in
bestimmten Fällen als sehr speicherhungrig. Folgendes Datenmodell
scheint dabei angemessen:

 CREATE TABLE ltrCurrentPolls (
   Poll_ID INT not null AUTO_INCREMENT, 
   Node_ID INT not null, 
   PollType INT not null, 
   ExtraData TEXT not null, 
   AddDate DATETIME not null,
   PRIMARY KEY (Poll_ID), 
   INDEX (Node_ID),
   INDEX (AddDate)
 )
 
 CREATE TABLE ltrVotes (
   Expert VARCHAR (32) not null, 
   Poll_ID INT not null, 
   Vote INT not null, 
   PRIMARY KEY (Expert, Poll_ID), 
   INDEX (Vote)
 )  

ltrCurrentPolls beinhaltet eine Liste aller aktiven Polls. Poll_ID ist
dabei eine eindeutige Poll-ID (die in ltrVotes verwendet wird); Node_ID
definiert den Node, in dem sich die Abstimmung abspielt. PollType ist
ein Integer, der die Art des Polls (siehe unten) bestimmt. In ExtraData
befindet sich serialisiert ein Hash von weiteren, pollspezifischen,
Daten.

ltrVotes beinhaltet die Stimmen der einzelnen Benutzer. Primärschlüssel
ist der Zusammenschluss von Experten und Poll_ID (jeder Experte kann nur
einmal abstimmen). Vote ist die Stimme selbst. Sie ist definiert als
Integer, um in späteren Fällem mehrstufige Abstimmungen zu erlauben.


3) Abstimmungstypen
Das System differneziert folgende Abstimmungstypen:

 Typ | Beschreibung
-----+-------------------------------------------------------------------+
 101 | Ein Directory-Node soll hinzugefügt werden. Text beinhaltet       |
     | Informationen über den Namen und die Beschreibung des Nodes. Wenn |
     | der Ersteller nicht ein Administrator ist, wird dieser Ebenso im  |
     | Text-Feld festgehalten                                            |
-----+-------------------------------------------------------------------+
 102 | Ein Directory-Node soll umbenannt werden. Text beinhaltet, sofern |
     | vorhanden, den Owner der Abstimmung, die neue Beschreibung und    |
     | den neuen Titel der Kategorie                                     |
-----+-------------------------------------------------------------------+


4) GUI 
Die GUI ist momentan noch nicht fertig gestellt.


5) Applikationslogik
Auch in diesem Fall empfihelt sich, wie schon bei [2], ein
Objektorientierter Ansatz, zumal dieser es erlaubt, langfrisitg mit
beliebig vielen Poll-Tpyen umzugehen.

Eine Abstimmung wird damit durch ein Objekt ltrPoll repräsentiert. Ein
solches Objekt bietet folgendes Interface nach Aussen (C++-Notation in
Gebrauch)

 ltrPoll::print_form($expert)
 Zeigt die aktuelle Abstimmung an. Jedes Objekt kann seine eigene
 Darstellungsart verwenden und sein Formular anzeigen. Wie in [2] dient
 eine HTTP-Variable zur Identifikation einer Kommunikation mit einem
 Message-Objekt (pollid). Die Methode ist berechtigt, die Ausgabe
 Experten-spezifisch zu gestalten.
 
 ltrPoll::print_results()
 Ist ein User mit der Permission > "user" in einem directory mit
 laufenden Polls, so kann über print_results() ein Überblick über die
 laufende Abstimmung eingesehen werden.
 
 ltrPoll::execute_action($result_id)
 Die Aktion dieser Abstimmung wird ausgeführt. In einer ersten Phase
 wird result_id entweder 0 oder 1 sein, um eine Ja/Nein-Abstimmung zu
 repräsentieren (mehr ist momentan nicht nötig).
 
 ltrPoll::self_destruct()
 Diese Abstimmung zerstört sich und alle Stimmen. Diese Methode sollte
 nur intern, als Abschluss von execute_action() aufgerufen werden.
 
 ltrPoll::poll($result_id, $expert)
 Die eigentliche Abstimmung. Die poll-Klasse "entscheidet" selbst, ob
 ein neuer Eintrag in ltrVotes gemacht werden muss, oder ob ein
 bestehender Experte seine Meinung geändert hat.
 
Öffentliche Member-Variabeln sind:

 ltrPoll::Poll_ID
 Die Datenbank-Id des aktuellen Objekts
 
 ltrPoll::Owner
 Der Initiator des Polls. Dieser darf selbst nicht "nein" stimmen, kann
 aber die Abstimmung per sofort abbrechen.
 

6) Betrachtung
Die etwas komplizierte Datenstruktur erlaubt eine detailierte Auswertung
der Abstimmungen bei grösst möglicher Speichersparnis und grösst
möglicher Flexibilität. Nach Fertigstellung der GUI kann das Konzept in
kurzer Zeit in die Tat umgesetzt werden. Damit wird die Aufgabenstellung
aus[1] zu 100% erfüllt.

philip.hofstetter@linktrail.com
11.11.00

--
1) expertpoll.txt
2) ltrMessages.txt
